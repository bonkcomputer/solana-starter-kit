const { PrismaClient } = require('../src/generated/prisma');

const prisma = new PrismaClient();

async function addOGStatusToAllUsers() {
  try {
    console.log('🏷️  Adding OG status to all existing users...\n');
    
    // First, get all existing users
    const allUsers = await prisma.user.findMany({
      select: {
        privyDid: true,
        username: true,
        createdAt: true
      }
    });
    
    console.log(`📊 Found ${allUsers.length} existing users`);
    
    if (allUsers.length === 0) {
      console.log('❌ No users found in database');
      return;
    }
    
    console.log('🔄 Processing users to add OG status...\n');
    
    let updatedCount = 0;
    let errorCount = 0;
    
    // Process each user
    for (const user of allUsers) {
      try {
        // Determine OG reason based on user data
        let ogReason = 'Original community member';
        
        // Check if user has auto-generated username pattern (restored users)
        const autoGeneratedPattern = /^user_[a-zA-Z0-9]{8}$/;
        if (autoGeneratedPattern.test(user.username)) {
          ogReason = 'Restored user';
        }
        
        // Check if user has cmcq prefix in privyDid (from CSV restoration)
        if (user.privyDid && user.privyDid.includes('cmcq')) {
          ogReason = 'Restored from CSV';
        }
        
        // OG cutoff date - users created before July 6, 2025 are considered OG
        const ogCutoffDate = new Date('2025-07-06T00:00:00Z');
        if (user.createdAt < ogCutoffDate) {
          ogReason = 'Early adopter';
        }
        
        // Update user with OG status
        await prisma.user.update({
          where: { privyDid: user.privyDid },
          data: {
            isOG: true,
            ogReason: ogReason
          }
        });
        
        console.log(`✅ Marked ${user.username} (${user.privyDid.slice(0, 8)}...) as OG - Reason: ${ogReason}`);
        updatedCount++;
        
      } catch (error) {
        console.error(`❌ Error updating user ${user.username}:`, error.message);
        errorCount++;
      }
    }
    
    console.log('\n📈 Summary:');
    console.log(`✅ Successfully updated: ${updatedCount} users`);
    console.log(`❌ Errors: ${errorCount} users`);
    console.log('🎉 All existing users have been marked as OG!');
    
  } catch (error) {
    console.error('❌ Error in OG status update:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Run the script
addOGStatusToAllUsers(); 