// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  privyDid              String    @id @unique
  createdAt             DateTime  @default(now())
  username              String    @unique
  bio                   String?
  image                 String?
  solanaWalletAddress   String?
  embeddedWalletAddress String?
  lastUsernameChange    DateTime? // Track when username was last changed
  
  // Points system fields
  totalPoints           Int       @default(0)
  currentStreak         Int       @default(0)
  longestStreak         Int       @default(0)
  lastLoginDate         DateTime?
  referralCode          String    @unique @default(cuid())
  referredBy            String?   // Reference to referring user's privyDid
  
  // Relations
  following             Follow[]  @relation("Followers")
  followers             Follow[]  @relation("Following")
  authoredComments      Comment[] @relation("AuthoredComments")
  profileComments       Comment[] @relation("ProfileComments")
  likes                 Like[]
  
  // Points system relations
  pointTransactions     PointTransaction[]
  achievements          UserAchievement[]
  referrals             User[]    @relation("Referrals")
  referrer              User?     @relation("Referrals", fields: [referredBy], references: [privyDid])
}

model Follow {
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [privyDid])
  following   User     @relation("Followers", fields: [followingId], references: [privyDid])

  @@id([followerId, followingId])
}

model Comment {
  id                String   @id @default(cuid())
  text              String
  createdAt         DateTime @default(now())
  authorId          String
  profileId         String
  tapestryCommentId String?  @unique
  author            User     @relation("AuthoredComments", fields: [authorId], references: [privyDid])
  profile           User     @relation("ProfileComments", fields: [profileId], references: [privyDid])
  likes             Like[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [privyDid])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

// Points System Models

model PointTransaction {
  id          String            @id @default(cuid())
  userId      String
  points      Int
  actionType  PointActionType
  description String
  createdAt   DateTime          @default(now())
  metadata    Json?             // Additional data about the action (e.g., trade details, referral info)
  
  user        User              @relation(fields: [userId], references: [privyDid])
  
  @@index([userId, createdAt])
}

model Achievement {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  icon        String
  pointsReward Int
  category    AchievementCategory
  requirement Json              // Flexible requirement structure
  createdAt   DateTime          @default(now())
  
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())
  
  user          User        @relation(fields: [userId], references: [privyDid])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  @@unique([userId, achievementId])
}

model DailyPointsLog {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime @db.Date
  points    Int
  actions   Json     // Track which actions were performed that day
  
  @@unique([userId, date])
  @@index([date])
}

// Enums

enum PointActionType {
  PROFILE_CREATION
  DAILY_LOGIN
  STREAK_BONUS
  COMMENT_CREATED
  LIKE_GIVEN
  FOLLOW_USER
  TRADE_COMPLETED
  REFERRAL_BONUS
  PROFILE_UPDATE
  PORTFOLIO_VIEW
  ACHIEVEMENT_UNLOCKED
  ADMIN_ADJUSTMENT
}

enum AchievementCategory {
  SOCIAL
  TRADING
  ENGAGEMENT
  REFERRAL
  MILESTONE
  SPECIAL
}
