/**
 * Username validation utilities
 * Centralized validation logic for usernames across the application
 */

export interface UsernameValidationResult {
  isValid: boolean;
  error?: string;
  sanitized?: string;
}

export const USERNAME_RULES = {
  MIN_LENGTH: 3,
  MAX_LENGTH: 20,
  REGEX: /^[a-z0-9]+$/,
  RESERVED_USERNAMES: [
    'admin', 'administrator', 'root', 'system', 'support', 'help',
    'api', 'www', 'mail', 'ftp', 'team', 'test', 'demo', 'guest', 'user',
    'null', 'undefined', 'true', 'false', 'bot', 'moderator', 'mod'
  ]
} as const;

/**
 * Validates a username according to the application rules
 */
export function validateUsername(username: string): UsernameValidationResult {
  // Check if username is provided
  if (!username) {
    return {
      isValid: false,
      error: 'Username is required'
    };
  }

  // Check length
  if (username.length < USERNAME_RULES.MIN_LENGTH) {
    return {
      isValid: false,
      error: `Username must be at least ${USERNAME_RULES.MIN_LENGTH} characters long`
    };
  }

  if (username.length > USERNAME_RULES.MAX_LENGTH) {
    return {
      isValid: false,
      error: `Username must be no more than ${USERNAME_RULES.MAX_LENGTH} characters long`
    };
  }

  // Check format (alphanumeric, lowercase only)
  if (!USERNAME_RULES.REGEX.test(username)) {
    return {
      isValid: false,
      error: 'Username must contain only lowercase letters and numbers'
    };
  }

  // Check for reserved usernames
  if (USERNAME_RULES.RESERVED_USERNAMES.includes(username.toLowerCase() as any)) {
    return {
      isValid: false,
      error: 'This username is reserved and cannot be used'
    };
  }

  return {
    isValid: true,
    sanitized: username.toLowerCase()
  };
}

/**
 * Sanitizes a username input by removing invalid characters and converting to lowercase
 */
export function sanitizeUsername(input: string): string {
  return input
    .toLowerCase()
    .replace(/[^a-z0-9]/g, '')
    .slice(0, USERNAME_RULES.MAX_LENGTH);
}

/**
 * Generates a unique username suggestion based on a base username
 */
export function generateUsernameSuggestions(baseUsername: string, count: number = 5): string[] {
  const sanitized = sanitizeUsername(baseUsername);
  const suggestions: string[] = [];
  
  // Add the base username if it's valid
  const baseValidation = validateUsername(sanitized);
  if (baseValidation.isValid) {
    suggestions.push(sanitized);
  }
  
  // Generate numbered variations
  for (let i = 1; suggestions.length < count; i++) {
    const suggestion = `${sanitized}${i}`;
    const validation = validateUsername(suggestion);
    if (validation.isValid) {
      suggestions.push(suggestion);
    }
  }
  
  return suggestions;
}

/**
 * Checks if a username is likely auto-generated (for restored users)
 */
export function isAutoGeneratedUsername(username: string): boolean {
  return username.startsWith('user_') && username.length > 5;
}

/**
 * Extracts the base part of an auto-generated username for suggestions
 */
export function getBaseFromAutoGenerated(username: string): string {
  if (isAutoGeneratedUsername(username)) {
    // Extract the identifier part after 'user_'
    const identifier = username.substring(5);
    return identifier.slice(0, 8); // Take first 8 characters for suggestions
  }
  return username;
}

/**
 * Client-side real-time validation for input fields
 */
export function validateUsernameRealTime(username: string): {
  isValid: boolean;
  error?: string;
  warning?: string;
} {
  const validation = validateUsername(username);
  
  if (!validation.isValid) {
    return validation;
  }
  
  // Add warnings for potentially confusing usernames
  if (isAutoGeneratedUsername(username)) {
    return {
      isValid: true,
      warning: 'This looks like an auto-generated username. Consider choosing something more personal.'
    };
  }
  
  return { isValid: true };
}
